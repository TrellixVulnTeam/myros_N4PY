// Generated by gencpp from file smart_battery_msgs/SmartBatteryStatus.msg
// DO NOT EDIT!


#ifndef SMART_BATTERY_MSGS_MESSAGE_SMARTBATTERYSTATUS_H
#define SMART_BATTERY_MSGS_MESSAGE_SMARTBATTERYSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace smart_battery_msgs
{
template <class ContainerAllocator>
struct SmartBatteryStatus_
{
  typedef SmartBatteryStatus_<ContainerAllocator> Type;

  SmartBatteryStatus_()
    : header()
    , voltage(0.0)
    , rate(0.0)
    , charge(0.0)
    , capacity(0.0)
    , design_capacity(0.0)
    , percentage(0)
    , charge_state(0)
    , present(false)  {
    }
  SmartBatteryStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , voltage(0.0)
    , rate(0.0)
    , charge(0.0)
    , capacity(0.0)
    , design_capacity(0.0)
    , percentage(0)
    , charge_state(0)
    , present(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _voltage_type;
  _voltage_type voltage;

   typedef float _rate_type;
  _rate_type rate;

   typedef float _charge_type;
  _charge_type charge;

   typedef float _capacity_type;
  _capacity_type capacity;

   typedef float _design_capacity_type;
  _design_capacity_type design_capacity;

   typedef int32_t _percentage_type;
  _percentage_type percentage;

   typedef uint8_t _charge_state_type;
  _charge_state_type charge_state;

   typedef uint8_t _present_type;
  _present_type present;


    enum { DISCHARGING = 0u };
     enum { CHARGING = 1u };
     enum { CHARGED = 2u };
 

  typedef boost::shared_ptr< ::smart_battery_msgs::SmartBatteryStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smart_battery_msgs::SmartBatteryStatus_<ContainerAllocator> const> ConstPtr;

}; // struct SmartBatteryStatus_

typedef ::smart_battery_msgs::SmartBatteryStatus_<std::allocator<void> > SmartBatteryStatus;

typedef boost::shared_ptr< ::smart_battery_msgs::SmartBatteryStatus > SmartBatteryStatusPtr;
typedef boost::shared_ptr< ::smart_battery_msgs::SmartBatteryStatus const> SmartBatteryStatusConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smart_battery_msgs::SmartBatteryStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smart_battery_msgs::SmartBatteryStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace smart_battery_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'smart_battery_msgs': ['/tmp/binarydeb/ros-indigo-smart-battery-msgs-0.1.0/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::smart_battery_msgs::SmartBatteryStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smart_battery_msgs::SmartBatteryStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smart_battery_msgs::SmartBatteryStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smart_battery_msgs::SmartBatteryStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smart_battery_msgs::SmartBatteryStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smart_battery_msgs::SmartBatteryStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smart_battery_msgs::SmartBatteryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "201bffbb268bdae8f8389acae4ae6db2";
  }

  static const char* value(const ::smart_battery_msgs::SmartBatteryStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x201bffbb268bdae8ULL;
  static const uint64_t static_value2 = 0xf8389acae4ae6db2ULL;
};

template<class ContainerAllocator>
struct DataType< ::smart_battery_msgs::SmartBatteryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smart_battery_msgs/SmartBatteryStatus";
  }

  static const char* value(const ::smart_battery_msgs::SmartBatteryStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smart_battery_msgs::SmartBatteryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 DISCHARGING = 0\n\
uint8 CHARGING    = 1\n\
uint8 CHARGED     = 2\n\
\n\
Header  header\n\
float32 voltage          # Voltage in Volts\n\
float32 rate             # Negative when discharging (A)\n\
float32 charge           # Current charge in Ah\n\
float32 capacity         # Capacity in Ah (last full capacity)\n\
float32 design_capacity  # Capacity in Ah (design capacity)\n\
int32   percentage       # Charge percentage\n\
uint8   charge_state     # Enum \n\
bool    present          # Should be an error if battery is not present\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::smart_battery_msgs::SmartBatteryStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smart_battery_msgs::SmartBatteryStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.voltage);
      stream.next(m.rate);
      stream.next(m.charge);
      stream.next(m.capacity);
      stream.next(m.design_capacity);
      stream.next(m.percentage);
      stream.next(m.charge_state);
      stream.next(m.present);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SmartBatteryStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smart_battery_msgs::SmartBatteryStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smart_battery_msgs::SmartBatteryStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
    s << indent << "rate: ";
    Printer<float>::stream(s, indent + "  ", v.rate);
    s << indent << "charge: ";
    Printer<float>::stream(s, indent + "  ", v.charge);
    s << indent << "capacity: ";
    Printer<float>::stream(s, indent + "  ", v.capacity);
    s << indent << "design_capacity: ";
    Printer<float>::stream(s, indent + "  ", v.design_capacity);
    s << indent << "percentage: ";
    Printer<int32_t>::stream(s, indent + "  ", v.percentage);
    s << indent << "charge_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.charge_state);
    s << indent << "present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.present);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMART_BATTERY_MSGS_MESSAGE_SMARTBATTERYSTATUS_H
